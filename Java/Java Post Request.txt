        
import org.springframework.http.*;

String initiatePaymentUrl = "http://localhost:8040/rest/payment/initiatePayment";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, String> requestMap = new HashMap<>();
        requestMap.put("token",authTokenResponse.getAcessToken());

        String prAmount = paymentOnlinePaymentModel.getPrAmount();
        if (prAmount == null) {
            throw new IllegalArgumentException("Payment amount can't be null");
        }
        requestMap.put("amount",prAmount);

        String bankCode = paymentOnlinePaymentModel.getBankcode();

        if(bankCode == null) {
            throw new IllegalArgumentException("Bank Code can't be null");
        }
        requestMap.put("bankCode",bankCode);
        HttpEntity<Map<String, String>> requestEntity = new HttpEntity<>(requestMap, headers);
        ResponseEntity<InitiateTransactionResponse> response = restTemplate.postForEntity(initiatePaymentUrl, requestEntity, InitiateTransactionResponse.class);




// This is with header and other data



/// This is with header and other data

public static void main(String[] args) {
        String url = "https://mock.developer.paynet.my/merchants/v1/payments/redirect";
        String token = "eyJraWQiOiIwM2UyNzk4ZDZkOTc0MjAwOWM0YjZjNTVlZGY1ZjU1NCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyYWIzMmExNjJkNWQ0MjViYWJhYzZmZjFhNTA4NDFmZSIsIm5iZiI6MTcwMzY1NzAyNiwic2NvcGUiOiJycHA6bWVyY2hhbnQiLCJpc3MiOiJodHRwcz1cL1wvYXBpLnVhdC5pbmV0LnBheW5ldC5teVwvYXV0aCIsImV4cCI6MTcwMzc0MzQyNiwiaWF0IjoxNzAzNjU3MDI2LCJqdGkiOiJkZTgzZGY0NDg5ZmE0NWUyODlmOTQxNTdjZjVjOTM1MCJ9.UsiZSNSrJV0Xq-dH8W6gTTkSaFxNxJ4pwDERS6BkHJ9o17Xx1nKEJ1yVTxdrCbcymOL3HpPeiMH__nqVjST-tK1WI4fP3-qyvGqcYNJaimJ4r0REiJsBsol-R16kIxudhCeA73sc1F47BwIiFWTd-VwCDmmQrI-HNqhG31lRgKgOUtuJz1A4TInTXd3UwsTpK6iltmXEkl0IbtIaIgL3TvJS6227oq_2Vvd5142vLUU0ffAHSTA7AKk63RbfIdQeK0jpt7x8tLjRU_8PxmaDlGr6LCpz-gv5yC0YJcdOYfZ7Lvx-8_9iojWR1y2n1uvjf_qyz_AEjBTvCe9_50nB3w";

        InitiatePayment initiatePayment = new InitiatePayment();
        initiatePayment.initatePaymentSystem(token, url);
    }

    public Object initatePaymentSystem(String token, String URL) {
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("User-Agent", "curl/7.88.1");
        headers.add("Authorization", "Bearer " + token);
        headers.add("X-Gps-Coordinates", "40.689263, 74.044505");
        headers.add("X-Ip-Address", "8.8.8.8");
        headers.add("X-Signature", signature);
        headers.add("X-Signature-Key", hexString("19e893e9afe3a27a".getBytes()));

        PaymentDetails paymentDetails = new PaymentDetails();
        paymentDetails.setClientId(clientId);
        paymentDetails.setMessageId(messageId);
        paymentDetails.setTransactionId(transactionId);
        paymentDetails.setEndToEndId(messageId);


        Merchant merchant = new Merchant();
        merchant.setName("WindUp");
        merchant.setAccountType("SVGS");
        paymentDetails.setMerchant(merchant);

        Customer customer = new Customer();
        customer.setName("John Doe");
        customer.setBankType("RET");
        paymentDetails.setCustomer(customer);

        paymentDetails.setAmount(150.99);
        paymentDetails.setCurrency("MYR");
        paymentDetails.setProductId("P00000381");

        String[] sourceOfFunds = {"01"};
        paymentDetails.setSourceOfFunds(sourceOfFunds);
        paymentDetails.setRecipientReference("Order No 12345");
        paymentDetails.setPaymentDescription("Shop XYZ");


        HttpEntity<PaymentDetails> req = new HttpEntity<>(paymentDetails, headers);

        try {
            ResponseEntity<String> res = createRest().exchange(URL, HttpMethod.POST, req, String.class);
            ObjectMapper objectMapper = new ObjectMapper();
            Object parsedJson = objectMapper.readValue(res.getBody(), Object.class);
            return parsedJson;
            //println(res.getStatusCode() + " " + res.getBody());
        } catch (Exception e) {
            println("ERROR3 " + e.getMessage());
        }
        return null;
    }

    private static void println(Object o) {
        System.out.println(o);
    }

    public static String hexString(byte[] bytes) {
        BigInteger big = new BigInteger(1, bytes);
        return String.format("%0" + (bytes.length << 1) + "x", big);
    }


    private void createSignature() {
        String priKey = "src/main/resources/my/paynet/bless.gov.my.pri.key";
        String pubKey = "src/main/resources/my/paynet/bless.gov.my.pub.crt";
        try {
            PrivateKey pri = PKCS_PriKey.createPrivateKey(priKey);
            PublicKey pub = X509_PubKey.createPublicKey(pubKey);
            Signature sign = Signature.getInstance("SHA256withRSA");
            sign.initSign(pri);
            sign.update(txt.getBytes());
            signature = new String(Base64.getEncoder().encode(sign.sign()));
        } catch (Exception e) {
            println(e.getMessage());
        }
    }

    private RestTemplate createRest() {
        RestTemplate rest = new RestTemplate(clientHttpRequestFactory());
        //rest.setInterceptors(Collections.singletonList(new RequestResponseLoggingInterceptor()));
        return rest;
    }

    private ClientHttpRequestFactory clientHttpRequestFactory() {
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
        factory.setConnectionRequestTimeout(300_000);
        factory.setConnectTimeout(300_000);
        return factory;
    }

    private final String clientId = "M0000221";
    private final String BANK__IC = "M0000221";
    private final String messageId;
    private final String transactionId;
    private final String txt;
    private String body;
    private String signature;

    public InitiatePayment() {
        SimpleDateFormat yyyyMMdd = new SimpleDateFormat("yyyyMMdd");
        String YYYYMMDD = yyyyMMdd.format(new Date());
        String originator = "O";   // O=OFI H=RPP R=RFI
        String channelCode = "BW"; // BA (Mobile) BW (WebBrowser)
        String SSSSSSSS = "36240300";
        messageId = YYYYMMDD + BANK__IC + "861" + originator + channelCode + SSSSSSSS; // YYYYMMDDBBBBBBBBXXXOCCSSSSSSSS
        //messageId = "20231227M0000221861OBW36240300";
        transactionId = YYYYMMDD + BANK__IC + "861" + SSSSSSSS;
        //transactionId = "20231227M000022186136240300";
        txt = clientId + BANK__IC + messageId + transactionId + messageId + clientId;
        body = "";
        body += "clientId=" + clientId + "&";
        body += "messageId=" + messageId + "&";
        body += "transactionId=" + transactionId;
        createSignature();
    }